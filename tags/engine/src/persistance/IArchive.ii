#ifndef _Persistance_IArchive_ii
#define _Persistance_IArchive_ii

#include "TextReader.h"

//
// Reads primitive - typed data from the archive
template <class PrimType>
void Persistance::IArchive::
   readPrimitive(PrimType& param)
{
   if (_text) {
      TextReader reader (_in, false);
      reader >> param;
   }
   else {
      void *ptr = reinterpret_cast <void*> (&param);
      _in->read (ptr, sizeof(param));
   }
}


//
// Reads an array of primitive - typed data or
// a class/union/struct from the archive,
// into a referenced pointer.
// of course, memory is allocated for that pointer
// automatically
// the function also reads back the number of items 
// in the array into the 1st parameter (n).
// optionally, n could be NULL
template <class Type>
void Persistance::IArchive::
   readArray(long *n , Type*& params)
{

	//
	// check expected prefix
   Prefix preExpected = readPrefix();
   if ( preExpected != preArray )   {
      char buffer[128]; 
      sprintf(buffer, "%d. %d", preExpected , preClass );
      throw CSZ_Error ( CSZ_ERR_VALIDATE_PREFIX_FAILURE , CSZ_ARCHOUT_TMPL_H , __LINE__ , NULL , buffer);
   }

   long len;
   readPrimitive(len);
   if ( n != NULL)
      *n = len;
   
   if ( len == 0) { // Size of array is zero
      params = NULL;
   }
   else if ( len < 0 ) {// BAD LENGTH Exception
      throw CSZ_Error ( CSZ_ERR_READ_ARRAY_BADLEN , CSZ_ARCHOUT_TMPL_H , __LINE__ );
   }
   else {// All is OK
      params = new Type[len];
		for (int i = 0 ; i < len ; i++)
   		*this >> params[i];
   }
}





template <class T>
Persistance::IArchive& Persistance::IArchive::
   readObject (T*& param)
{
   Prefix preExpected = readPrefix();
   switch (preExpected )   {
	   case preNullPointer: {
         param = NULL;
			break;
      }

      case preValidPointer:   {
         preExpected = readPrefix();
         if ( preExpected != preClass )   {
            char buffer[128]; 
            sprintf(buffer, "%d. %d", preExpected , preClass );
            throw CSZ_Error ( CSZ_ERR_VALIDATE_PREFIX_FAILURE , CSZ_ARCHOUT_TMPL_H , __LINE__ , NULL , buffer);
         }
         else {
            char* class_name;
            *this >> class_name;

            // invoke the function, and upcast it from CSZ_Object to T.               
            param = dynamic_cast <T*> (
               _factories->createObject (class_name));

            //if casting failed, it is beacuse types were incompatible
            if (param == NULL)   {
               char buffer[128]; 
               sprintf(buffer, "%s", class_name );                     
               throw CSZ_Error( CSZ_ERR_DIFFRENT_CLASS_FAILURE ,CSZ_ARCHOUT_TMPL_H , __LINE__ , NULL , buffer );
            }
           else
               param->serialize(*this);  // deserialize
         }
         break;
      }

		default: {
         char buffer[128]; 
         sprintf(buffer, "%d. %d", preExpected , preValidPointer );
         throw CSZ_Error ( CSZ_ERR_VALIDATE_PREFIX_FAILURE , CSZ_ARCHOUT_TMPL_H , __LINE__ , NULL , buffer);
      }
   }

   return *this;
}





///
/// this function registers an object in IRegistry either as declaration or reference.
template <class T>
Persistance::IArchive& Persistance::IArchive::
	registerObject (T* const&  param  )
{
   _registry.readObject( reinterpret_cast <CSZ_Object **> (const_cast<T**>((&param))) , *this );
   return *this;
}

#endif // _Persistance_IArchive_ii