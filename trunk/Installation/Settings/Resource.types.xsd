<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="resource_types" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!--                                      -->
	<!--                                      -->
	<!--                                      -->
	<!--                                      -->
	<!-- this is the main object of the XML   -->
	<!-- just a collection of resource types  -->
	<!--                                      -->
	<!--                                      -->
	<xs:element name="resource_types" type="resource_types"/>

	<!--                              -->
	<!--                              -->
	<!-- define the text type -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-text">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the external_ref type -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-external_ref">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
		<xs:attribute name="mask" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the internal_ref type -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-internal_ref">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
		<xs:attribute name="minOccurs" type="xs:unsignedByte" use="optional"/>
		<xs:attribute name="maxOccurs" type="xs:string" use="optional"/>
		<xs:attribute name="mask" type="xs:string" use="optional"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!--                              -->
	<!-- defines the numeric type     -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-numeric">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="display_name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
		<xs:attribute name="Help" type="xs:string" use="optional"/>
		<xs:attribute name="default" type="xs:decimal" use="required"/>
		<xs:attribute name="min" type="xs:decimal" use="optional"/>
		<xs:attribute name="max" type="xs:decimal" use="optional"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the enum_element type -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-enum-element">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<!-- allow text fields-->
			<xs:element name="text" type="fields-text"/>
			<!-- allow internal refs -->
			<xs:element name="internal_ref" type="fields-internal_ref"/>
			<!-- allow external refs -->
			<xs:element name="external_ref" type="fields-external_ref"/>
			<!-- allow numeric -->
			<xs:element name="numeric" type="fields-numeric"/>
			<!-- allow enums -->
			<xs:element name="enum" type="fields-enum"/>
		</xs:choice>
		<!-- attributes must be defined -->
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="display_name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the enum type         -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="fields-enum">
		<xs:choice minOccurs="1" maxOccurs="unbounded">
			<!-- contains one or more enum_elements-->
			<xs:element name="enum_element" type="fields-enum-element"/>
		</xs:choice>
		<!-- attributes must be defined -->
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="display_name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the import type       -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="execute-import">
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the path type         -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="export-path">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="value" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the text type         -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="export-text">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="value" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the "and" conditional -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="and">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="and" type="and" />
			<xs:element name="or" type="or" />
			<xs:element name="not" type="not" />
			<xs:element name="equals" type="equals" />
		</xs:choice>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the "or" conditional  -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="or">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="and" type="and"/>
			<xs:element name="or" type="or" />
			<xs:element name="not" type="not" />
			<xs:element name="equals" type="equals" />
		</xs:choice>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the "not" conditional -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="not">
		<xs:choice>
			<xs:element name="and" type="and"/>
			<xs:element name="or" type="or"/>
			<xs:element name="not" type="not"/>
			<xs:element name="equals" type="equals"/>
		</xs:choice>
	</xs:complexType>
	<!--                                -->
	<!--                                -->
	<!-- defines the equals conditional -->
	<!--                                -->
	<!--                                -->
	<xs:complexType name="equals">
		<xs:attribute name="A" type="xs:string" use="required"/>
		<xs:attribute name="B" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- defines the export type      -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="export">
		<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element name="path" type="export-path" />
			<xs:element name="text" type="export-text" />
			<xs:element name="conditional" type="export-conditional" />
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<!-- must specify the type of export. currently only "params" style export is supported -->
		<xs:attribute name="type" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="params"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>


	<xs:complexType name="export-conditional-then">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="path" type="export-path" />
			<xs:element name="text" type="export-text" />
			<xs:element name="export-conditional" type="export-conditional" />
		</xs:choice>
	</xs:complexType>
	
	<!--                                    -->
	<!--                                    -->
	<!-- define the conditional for exports -->
	<!--                                    -->
	<!--                                    -->
	<xs:complexType name="export-conditional">
		<xs:sequence>
			<!-- "if" section -->
			<xs:element name="if" type="and"/>
			<!-- "then" section -->
			<xs:element name="then"  type="export-conditional-then"/>
			<!-- "else" optional section -->
			<xs:element name="else"  type="export-conditional-then" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>

	<!--                                					-->
	<!--                                					-->
	<!-- define the general conditional 	-->
	<!-- then section					-->
	<!--                                					-->
	<xs:complexType name="execute-conditional-then">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<!-- allow conditionals -->
			<xs:element name="conditional" type="execute-conditional" />
			<!--  allow run -->
			<xs:element name="run" type="execute-run" />
			<!--  allow import -->
			<xs:element name="import" type="execute-import" />
			<!--  allow export -->
			<xs:element name="export " type="export " />												
		</xs:choice>
	</xs:complexType>
	
	
	<!--                                -->
	<!--                                -->
	<!-- define the general conditional -->
	<!--                                -->
	<!--                                -->
	<xs:complexType name="execute-conditional">
		<xs:sequence>
			<!-- "if" section -->
			<xs:element name="if" type="and"/>
			<!-- "then" section -->
			<xs:element name="then" type="execute-conditional-then"/>
			<!-- "else" optional section -->
			<xs:element name="else" type="execute-conditional-then" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the run type          -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="execute-run">
		<xs:attribute name="bin" type="xs:string" use="required"/>
		<xs:attribute name="params" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the execute type      -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="execute">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="export" type="export" />
			<xs:element name="run" type="execute-run" />
			<xs:element name="import" type="execute-import" />
			<xs:element name="conditional" type="execute-conditional"/> 
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>
	</xs:complexType>
	<!--                              -->
	<!--                              -->
	<!-- define the resource_tye type -->
	<!--                              -->
	<!--                              -->
	<xs:complexType name="resource_type">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<!-- allows all possible fields -->
			<xs:element name="text" type="fields-text"/>
			<xs:element name="internal_ref" type="fields-internal_ref"/>
			<xs:element name="external_ref" type="fields-external_ref"/>
			<xs:element name="numeric" type="fields-numeric"/>
			<xs:element name="enum" type="fields-enum"/>
			<!-- allows executions -->
			<xs:element name="execute" type="execute"/>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="help" type="xs:string" use="required"/>

	</xs:complexType>
	<!--                                -->
	<!--                                -->
	<!-- define the resource_types type -->
	<!--                                -->
	<!--                                -->
	<xs:complexType name="resource_types">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="resource_type" type="resource_type"  />
		</xs:choice>
	</xs:complexType>


</xs:schema>
