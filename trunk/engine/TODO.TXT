12/9/04 Requirements
---------------------

1) create regression test suite:
	a)	test for exact same results from both preprocessors
		when using different paramters:
		L D prep-L gene/total partial/discrete hypego/exp parameters
	b)	test for correct results for hand-crafted examples
	c)	test for match with old seed-searcher
	d)	test for match for older newseed version
	
2)	for regression tests:
	a)	ability to remove the lowest scoring seeds
		this is necessary in order to compare feature lists
		(which will only differ on the least scoring seeds)
	b)	prefer seeds of lower lexical order
		to facilitate deterministic selection of seeds

3)	multiple wgt files: (requires further defintions by yoseph)
	ability to select per conf-run the wgt file.
	limitation:	only the sequences that are specified by the first wgt file 
				are loaded and preprocessed.
	question:	should we mix seeds from different .wgt files?
				is there a reason to do this except for 
				- lowering time to build preprocessor (insignificant)
				- it is easier to combine seeds from different runs
				
4)	positional wgts:
	ability to specify a file of positional weights for certain sequences.
	this is only relevant in a partial-counts setting.
	the weight of every appearance of a seed is
	(the weight of the seq) * (the weight of the position)
	format of the .poswgt file:
	seq-name  start/end pos		wgt		start/end pos	wgt
	>GENE1		1	10			1		11-20			0.5...
	question: are the weights necessarility between 0 and 1?
	

5)	Open issues:
	a)	at the end of runs, no redundant seeds should be printed
		solution: keep more seeds than the user asked for
		perform redundancy checks at the end.
	b)	print positional data correctly - according to positive strand



6)	run-time performance optimization:
	a)	optimize feature-array code and redundancy checking
		it takes too much time for a large number of seeds
		
	b)	several places could benefit from using hash-tables
		instead of sets. investigate.
		
	c)	tree-search is slower than table search,
		but it has potentiall for searching for shorter seeds at the same time.
		this could be an interesting algorithm.
		
	
Additional requirements (complete)
------------------------

* .matrix file used in web 
* .seeds file summarizes output for a run
* .sample for libE compatible data
* contol of preprocessor depth
* oldseed-style search for seeds longer than the preprocessor
* db integration for web project
* --Sproj-mid	middle section wildcards
* --Sproj-base	allows to make projections on given assignments
* different configurations with a single preprocessor - conf files
* exp score
* projection specialization
* table-preprocessor achieves better performance than original tree-preprocessor
* table-search achieves better performance than original tree-search



Original requirements (complete)
-----------------------

(Yoseph) - reverse sequence 
- random projections :
	input: weights & sequences
	output: what are the seeds/motifs

	currently: hard-threshold for sequences for positively labeled
		finds all the features in the positive sequence
		puts random projection. keeps the k-best.
		
		works with a parameterized length of motives,
		number of projections position, number of randomizations

	future: 
(Yoseph) 1) real counts: count the weights
2) total-counts/gene counts
	total counts - prevent overlaps (or math fix later on)
	(YTD) gene counts	- option to have at least k positions in gene to count it

3) N in sequence : do not allow more than k- N in a KMer
		(does not allow any N's in a KNER)
(Yoseph) 4) statistical fix for score

random projections :
go down the tree until there is no more than k sequences (gene counts)from positively labeled
	(impossible)
K positions (total counts)

strategy:  K best / score less than: (both)

* if two motifs are the same in all no-random poisition - keep the best
* offset similarity (redundancy) - 

* exhaustive random projections
* dont allow random projections to be in outer positions

* score function doesnt have to hyper-geometric
	descend/dont descend is dependant on score
	* descend if p-value is low enough
	* descend if motif exists in 10% of sequences in the cluster



stat fix:
Bonneferoni
FDR


 